{"version":3,"sources":["element.js","App.js","reportWebVitals.js","index.js"],"names":["Element1","results","Object","keys","length","data","id","atomicMass","atomicNumber","atomicRadius","boilingPoint","bondingType","cpkHexColor","density","electronAffinity","electronegativity","electronicConfiguration","groupBlock","ionRadius","ionizationEnergy","meltingPoint","name","oxidationStates","standardState","symbol","vanDelWaalsRadius","yearDiscovered","App","useState","setData","getElements","element_name","a","fetch","response","json","data_raw","className","type","defaultValue","onClick","document","getElementById","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qPAqCeA,EAnCE,SAACC,GAEQC,OAAOC,KAAKF,EAAQA,SAASG,OAAnD,IAIMC,EAAOJ,EAAQA,QAErB,OACI,sBAAKK,GAAG,oBAAR,UACI,oBAAIA,GAAG,UACP,gDAAoBD,EAAKE,cACzB,kDAAsBF,EAAKG,gBAC3B,kDAAsBH,EAAKI,gBAC3B,kDAAsBJ,EAAKK,gBAC3B,iDAAqBL,EAAKM,eAC1B,iDAAqBN,EAAKO,eAC1B,4CAAgBP,EAAKQ,WACrB,sDAA0BR,EAAKS,oBAC/B,sDAA0BT,EAAKU,qBAC/B,qBAAIT,GAAG,KAAP,uCAAsC,uBAAtC,IAAiDD,EAAKW,2BACtD,gDAAoBX,EAAKY,cACzB,+CAAmBZ,EAAKa,aACxB,sDAA0Bb,EAAKc,oBAC/B,kDAAsBd,EAAKe,gBAC3B,yCAAaf,EAAKgB,QAClB,qDAAyBhB,EAAKiB,mBAC9B,mDAAuBjB,EAAKkB,iBAC5B,2CAAelB,EAAKmB,UACpB,yDAA6BnB,EAAKoB,qBAClC,oDAAwBpB,EAAKqB,sBCY1BC,MAxCf,WAEE,IAFa,EAIWC,mBAAS,IAJpB,mBAINvB,EAJM,KAIAwB,EAJA,KAMPC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAM,wEAAD,OAAyEF,IADnF,cACZG,EADY,gBAEKA,EAASC,OAFd,OAEZC,EAFY,OAGlBP,EAAQO,GAHU,2CAAH,sDAcjB,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAI/B,GAAG,QAAP,4BACA,qBAAK+B,UAAU,cAAf,SACA,iCACE,uBAAO/B,GAAG,aAAagC,KAAK,OAAOC,aAAa,aAChD,wBAAQjC,GAAG,aAAagC,KAAK,SAASE,QAX1B,WACdV,EAAYW,SAASC,eAAe,cAAcC,QAUhD,yBAKF,cAAC,EAAD,CAAU1C,QAASI,QCvBVuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASC,eAAe,SAM1BE,M","file":"static/js/main.69c28b9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Element1 = (results) => {\r\n\r\n    const result_length = Object.keys(results.results).length;\r\n\r\n\r\n\r\n    const data = results.results;\r\n\r\n    return(\r\n        <div id=\"results-container\">\r\n            <h2 id=\"ERROR\"></h2>\r\n            <h2 >Atomic Mass:  {data.atomicMass}</h2>\r\n            <h2 >Atomic Number:  {data.atomicNumber}</h2>\r\n            <h2 >Atomic Radius:  {data.atomicRadius}</h2>\r\n            <h2 >Boiling Point:  {data.boilingPoint}</h2>\r\n            <h2 >Bonding Type:  {data.bondingType}</h2>\r\n            <h2 >CpkHex Color:  {data.cpkHexColor}</h2>\r\n            <h2 >Density:  {data.density}</h2>\r\n            <h2 >Electron Affinity:  {data.electronAffinity}</h2>\r\n            <h2 >Electronegativity:  {data.electronegativity}</h2>\r\n            <h2 id=\"ec\">Electronic Configuration: <br></br> {data.electronicConfiguration}</h2>\r\n            <h2 >Group Block:  {data.groupBlock}</h2>\r\n            <h2 >ion Radius:  {data.ionRadius}</h2>\r\n            <h2 >ionization Energy:  {data.ionizationEnergy}</h2>\r\n            <h2 >melting Point:  {data.meltingPoint}</h2>\r\n            <h2 >name:  {data.name}</h2>\r\n            <h2 >oxidation States:  {data.oxidationStates}</h2>\r\n            <h2 >standard State:  {data.standardState}</h2>\r\n            <h2 >symbol:  {data.symbol}</h2>\r\n            <h2 >van Del Waals Radius:  {data.vanDelWaalsRadius}</h2>\r\n            <h2 >year Discovered:  {data.yearDiscovered}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Element1;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Element1 from'./element.js';\n\nfunction App() {\n  \n  var symbol = \"\";\n  \n  const [data, setData] = useState([]);\n\n  const getElements = async (element_name) =>{\n    const response = await fetch(`https://neelpatel05.pythonanywhere.com/element/atomicname?atomicname=${element_name}`);\n    const data_raw = await response.json();\n    setData(data_raw);\n    \n  }\n  \n  \n  \n     const search = () => {\n      getElements(document.getElementById(\"search-bar\").value);\n     }\n  \n\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">Elemental Data</h1>\n      <div className=\"search-pane\">\n      <form>\n        <input id=\"search-bar\" type=\"text\" defaultValue=\"Hydrogen\"/>\n        <button id=\"search-btn\" type=\"button\" onClick={search}>Search</button>\n      </form>\n      \n      </div>\n\n      <Element1 results={data}/>\n      \n    \n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}